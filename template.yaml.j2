Parameters:
  AppName:
    Type: String
    Default: {{ sceptre_user_data.AppName }}
  PrincipalRoleName:
    Type: String
    Default: {{ sceptre_user_data.PrincipalRoleName }}

Resources:

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-task-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - "ecs-tasks.amazonaws.com"
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ServiceSecretKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub For encrypting secrets to be read only by {{ sceptre_user_data.AppName }}.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub arn:aws:iam::${AWS::AccountId}:role/{{ sceptre_user_data.PrincipalRoleName }}
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow encryption with the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt TaskRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow decryption with the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt TaskRole.Arn
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
            Resource: '*'

  ServiceKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/app-key-${AppName}
      TargetKeyId: !Ref ServiceSecretKey

  RoleAccessToSecrets:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allowTaskAccessToSecrets
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParam*
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app-secrets/${AppName}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app-secrets/${AppName}/*'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app-secrets/shared'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app-secrets/shared/*'
      Roles:
        - !Ref TaskRole

Outputs:
  Name:
    Value: !Ref TaskRole
  Arn:
    Value: !GetAtt TaskRole.Arn
  KeyId:
    Value: !Ref ServiceSecretKey
